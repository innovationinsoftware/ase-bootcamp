{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../src/metrics/quickpulse/utils.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/* eslint-disable @typescript-eslint/no-unsafe-enum-comparison */\n\nimport * as os from \"os\";\nimport { ReadableSpan } from \"@opentelemetry/sdk-trace-base\";\nimport { LogRecord } from \"@opentelemetry/sdk-logs\";\nimport {\n  DocumentIngress,\n  Exception,\n  KeyValuePairString,\n  KnownDocumentType,\n  MetricPoint,\n  MonitoringDataPoint,\n  RemoteDependency,\n  /* eslint-disable-next-line @typescript-eslint/no-redeclare */\n  Request,\n  Trace,\n} from \"../../generated\";\nimport { Attributes, SpanKind } from \"@opentelemetry/api\";\nimport {\n  SEMATTRS_EXCEPTION_MESSAGE,\n  SEMATTRS_EXCEPTION_TYPE,\n  SEMATTRS_HTTP_HOST,\n  SEMATTRS_HTTP_METHOD,\n  SEMATTRS_HTTP_SCHEME,\n  SEMATTRS_HTTP_STATUS_CODE,\n  SEMATTRS_HTTP_TARGET,\n  SEMATTRS_HTTP_URL,\n  SEMATTRS_NET_PEER_IP,\n  SEMATTRS_NET_PEER_NAME,\n  SEMATTRS_NET_PEER_PORT,\n  SEMATTRS_RPC_GRPC_STATUS_CODE,\n  SEMRESATTRS_K8S_CRONJOB_NAME,\n  SEMRESATTRS_K8S_DAEMONSET_NAME,\n  SEMRESATTRS_K8S_DEPLOYMENT_NAME,\n  SEMRESATTRS_K8S_JOB_NAME,\n  SEMRESATTRS_K8S_POD_NAME,\n  SEMRESATTRS_K8S_REPLICASET_NAME,\n  SEMRESATTRS_K8S_STATEFULSET_NAME,\n  SEMRESATTRS_SERVICE_INSTANCE_ID,\n  SEMRESATTRS_SERVICE_NAME,\n  SEMRESATTRS_SERVICE_NAMESPACE,\n  SEMRESATTRS_TELEMETRY_SDK_VERSION,\n} from \"@opentelemetry/semantic-conventions\";\nimport { SDK_INFO, hrTimeToMilliseconds } from \"@opentelemetry/core\";\nimport { DataPointType, Histogram, ResourceMetrics } from \"@opentelemetry/sdk-metrics\";\nimport {\n  AZURE_MONITOR_AUTO_ATTACH,\n  AZURE_MONITOR_OPENTELEMETRY_VERSION,\n  AZURE_MONITOR_PREFIX,\n  AttachTypePrefix,\n} from \"../../types\";\nimport { Resource } from \"@opentelemetry/resources\";\nimport { QuickPulseMetricNames, QuickPulseOpenTelemetryMetricNames } from \"./types\";\nimport { getOsPrefix } from \"../../utils/common\";\nimport { getResourceProvider } from \"../../utils/common\";\nimport { LogAttributes } from \"@opentelemetry/api-logs\";\n\n/** Get the internal SDK version */\nexport function getSdkVersion(): string {\n  const { nodeVersion } = process.versions;\n  const opentelemetryVersion = SDK_INFO[SEMRESATTRS_TELEMETRY_SDK_VERSION];\n  const version = `ext${AZURE_MONITOR_OPENTELEMETRY_VERSION}`;\n  const internalSdkVersion = `${process.env[AZURE_MONITOR_PREFIX] ?? \"\"}node${nodeVersion}:otel${opentelemetryVersion}:${version}`;\n  return internalSdkVersion;\n}\n\n// eslint-disable-next-line tsdoc/syntax\n/** Set the version prefix to a string in the format \"{ResourceProvider}{OS}m_ */\nexport function setSdkPrefix(): void {\n  if (!process.env[AZURE_MONITOR_PREFIX]) {\n    const prefixAttachType: string =\n      process.env[AZURE_MONITOR_AUTO_ATTACH] === \"true\"\n        ? AttachTypePrefix.INTEGRATED_AUTO\n        : AttachTypePrefix.MANUAL;\n    process.env[AZURE_MONITOR_PREFIX] =\n      `${getResourceProvider()}${getOsPrefix()}${prefixAttachType}_`;\n  }\n}\n\nexport function getCloudRole(resource: Resource): string {\n  let cloudRole = \"\";\n  // Service attributes\n  const serviceName = resource.attributes[SEMRESATTRS_SERVICE_NAME];\n  const serviceNamespace = resource.attributes[SEMRESATTRS_SERVICE_NAMESPACE];\n  if (serviceName) {\n    // Custom Service name provided by customer is highest precedence\n    if (!String(serviceName).startsWith(\"unknown_service\")) {\n      if (serviceNamespace) {\n        return `${serviceNamespace}.${serviceName}`;\n      } else {\n        return String(serviceName);\n      }\n    } else {\n      // Service attributes will be only used if K8S attributes are not present\n      if (serviceNamespace) {\n        cloudRole = `${serviceNamespace}.${serviceName}`;\n      } else {\n        cloudRole = String(serviceName);\n      }\n    }\n  }\n  // Kubernetes attributes should take precedence\n  const kubernetesDeploymentName = resource.attributes[SEMRESATTRS_K8S_DEPLOYMENT_NAME];\n  if (kubernetesDeploymentName) {\n    return String(kubernetesDeploymentName);\n  }\n  const kuberneteReplicasetName = resource.attributes[SEMRESATTRS_K8S_REPLICASET_NAME];\n  if (kuberneteReplicasetName) {\n    return String(kuberneteReplicasetName);\n  }\n  const kubernetesStatefulSetName = resource.attributes[SEMRESATTRS_K8S_STATEFULSET_NAME];\n  if (kubernetesStatefulSetName) {\n    return String(kubernetesStatefulSetName);\n  }\n  const kubernetesJobName = resource.attributes[SEMRESATTRS_K8S_JOB_NAME];\n  if (kubernetesJobName) {\n    return String(kubernetesJobName);\n  }\n  const kubernetesCronjobName = resource.attributes[SEMRESATTRS_K8S_CRONJOB_NAME];\n  if (kubernetesCronjobName) {\n    return String(kubernetesCronjobName);\n  }\n  const kubernetesDaemonsetName = resource.attributes[SEMRESATTRS_K8S_DAEMONSET_NAME];\n  if (kubernetesDaemonsetName) {\n    return String(kubernetesDaemonsetName);\n  }\n  return cloudRole;\n}\n\nexport function getCloudRoleInstance(resource: Resource): string {\n  // Kubernetes attributes should take precedence\n  const kubernetesPodName = resource.attributes[SEMRESATTRS_K8S_POD_NAME];\n  if (kubernetesPodName) {\n    return String(kubernetesPodName);\n  }\n  // Service attributes\n  const serviceInstanceId = resource.attributes[SEMRESATTRS_SERVICE_INSTANCE_ID];\n  if (serviceInstanceId) {\n    return String(serviceInstanceId);\n  }\n  // Default\n  return os && os.hostname();\n}\n\nexport function resourceMetricsToQuickpulseDataPoint(\n  metrics: ResourceMetrics,\n  baseMonitoringDataPoint: MonitoringDataPoint,\n  documents: DocumentIngress[],\n): MonitoringDataPoint[] {\n  const metricPoints: MetricPoint[] = [];\n  metrics.scopeMetrics.forEach((scopeMetric) => {\n    scopeMetric.metrics.forEach((metric) => {\n      metric.dataPoints.forEach((dataPoint) => {\n        const metricPoint: MetricPoint = {\n          weight: 4,\n          name: \"\",\n          value: 0,\n        };\n\n        // Update name to expected value in Quickpulse, needed because those names are invalid in OTel\n        switch (metric.descriptor.name) {\n          case QuickPulseOpenTelemetryMetricNames.COMMITTED_BYTES:\n            metricPoint.name = QuickPulseMetricNames.COMMITTED_BYTES;\n            break;\n          case QuickPulseOpenTelemetryMetricNames.DEPENDENCY_DURATION:\n            metricPoint.name = QuickPulseMetricNames.DEPENDENCY_DURATION;\n            break;\n          case QuickPulseOpenTelemetryMetricNames.DEPENDENCY_FAILURE_RATE:\n            metricPoint.name = QuickPulseMetricNames.DEPENDENCY_FAILURE_RATE;\n            break;\n          case QuickPulseOpenTelemetryMetricNames.DEPENDENCY_RATE:\n            metricPoint.name = QuickPulseMetricNames.DEPENDENCY_RATE;\n            break;\n          case QuickPulseOpenTelemetryMetricNames.EXCEPTION_RATE:\n            metricPoint.name = QuickPulseMetricNames.EXCEPTION_RATE;\n            break;\n          case QuickPulseOpenTelemetryMetricNames.PROCESSOR_TIME:\n            metricPoint.name = QuickPulseMetricNames.PROCESSOR_TIME;\n            break;\n          case QuickPulseOpenTelemetryMetricNames.REQUEST_DURATION:\n            metricPoint.name = QuickPulseMetricNames.REQUEST_DURATION;\n            break;\n          case QuickPulseOpenTelemetryMetricNames.REQUEST_FAILURE_RATE:\n            metricPoint.name = QuickPulseMetricNames.REQUEST_FAILURE_RATE;\n            break;\n          case QuickPulseOpenTelemetryMetricNames.REQUEST_RATE:\n            metricPoint.name = QuickPulseMetricNames.REQUEST_RATE;\n            break;\n          default:\n            metricPoint.name = metric.descriptor.name;\n        }\n\n        if (\n          metric.dataPointType === DataPointType.SUM ||\n          metric.dataPointType === DataPointType.GAUGE\n        ) {\n          metricPoint.value = dataPoint.value as number;\n        } else {\n          metricPoint.value = (dataPoint.value as Histogram).sum || 0;\n        }\n        metricPoints.push(metricPoint);\n      });\n    });\n  });\n  const quickpulseDataPoint: MonitoringDataPoint = {\n    ...baseMonitoringDataPoint,\n    timestamp: new Date(),\n    metrics: metricPoints,\n    documents: documents,\n  };\n  return [quickpulseDataPoint];\n}\n\nfunction getIso8601Duration(milliseconds: number): string {\n  const seconds = milliseconds / 1000;\n  return `PT${seconds}S`;\n}\n\nexport function getSpanDocument(span: ReadableSpan): Request | RemoteDependency {\n  let document: Request | RemoteDependency = {\n    documentType: KnownDocumentType.Request,\n  };\n  const httpMethod = span.attributes[SEMATTRS_HTTP_METHOD];\n  const grpcStatusCode = span.attributes[SEMATTRS_RPC_GRPC_STATUS_CODE];\n  let url = \"\";\n  let code = \"\";\n  if (span.kind === SpanKind.SERVER || span.kind === SpanKind.CONSUMER) {\n    if (httpMethod) {\n      url = getUrl(span.attributes);\n      const httpStatusCode = span.attributes[SEMATTRS_HTTP_STATUS_CODE];\n      if (httpStatusCode) {\n        code = String(httpStatusCode);\n      }\n    } else if (grpcStatusCode) {\n      code = String(grpcStatusCode);\n    }\n\n    document = {\n      documentType: KnownDocumentType.Request,\n      name: span.name,\n      url: url,\n      responseCode: code,\n      duration: getIso8601Duration(hrTimeToMilliseconds(span.duration)),\n    };\n  } else {\n    url = getUrl(span.attributes);\n    const httpStatusCode = span.attributes[SEMATTRS_HTTP_STATUS_CODE];\n    if (httpStatusCode) {\n      code = String(httpStatusCode);\n    }\n\n    document = {\n      documentType: KnownDocumentType.RemoteDependency,\n      name: span.name,\n      commandName: url,\n      resultCode: code,\n      duration: getIso8601Duration(hrTimeToMilliseconds(span.duration)),\n    };\n  }\n  document.properties = createPropertiesFromAttributes(span.attributes);\n  return document;\n}\n\nexport function getLogDocument(logRecord: LogRecord): Trace | Exception {\n  let document: Trace | Exception = {\n    documentType: KnownDocumentType.Exception,\n  };\n  const exceptionType = String(logRecord.attributes[SEMATTRS_EXCEPTION_TYPE]);\n  if (exceptionType) {\n    const exceptionMessage = String(logRecord.attributes[SEMATTRS_EXCEPTION_MESSAGE]);\n    document = {\n      documentType: KnownDocumentType.Exception,\n      exceptionType: exceptionType,\n      exceptionMessage: exceptionMessage,\n    };\n  } else {\n    document = {\n      documentType: KnownDocumentType.Trace,\n      message: String(logRecord.body),\n    };\n  }\n  document.properties = createPropertiesFromAttributes(logRecord.attributes);\n  return document;\n}\n\nfunction createPropertiesFromAttributes(\n  attributes?: Attributes | LogAttributes,\n): KeyValuePairString[] {\n  const properties: KeyValuePairString[] = [];\n  if (attributes) {\n    for (const key of Object.keys(attributes)) {\n      // Avoid duplication ignoring fields already mapped.\n      if (\n        !(\n          key.startsWith(\"_MS.\") ||\n          key === SEMATTRS_NET_PEER_IP ||\n          key === SEMATTRS_NET_PEER_NAME ||\n          key === SEMATTRS_HTTP_METHOD ||\n          key === SEMATTRS_HTTP_URL ||\n          key === SEMATTRS_HTTP_STATUS_CODE ||\n          key === SEMATTRS_HTTP_HOST ||\n          key === SEMATTRS_HTTP_URL ||\n          key === SEMATTRS_EXCEPTION_TYPE ||\n          key === SEMATTRS_EXCEPTION_MESSAGE\n        )\n      ) {\n        properties.push({ key: key, value: String(attributes[key]) });\n      }\n    }\n  }\n  return properties;\n}\n\nfunction getUrl(attributes: Attributes): string {\n  if (!attributes) {\n    return \"\";\n  }\n  const httpMethod = attributes[SEMATTRS_HTTP_METHOD];\n  if (httpMethod) {\n    const httpUrl = attributes[SEMATTRS_HTTP_URL];\n    if (httpUrl) {\n      return String(httpUrl);\n    } else {\n      const httpScheme = attributes[SEMATTRS_HTTP_SCHEME];\n      const httpTarget = attributes[SEMATTRS_HTTP_TARGET];\n      if (httpScheme && httpTarget) {\n        const httpHost = attributes[SEMATTRS_HTTP_HOST];\n        if (httpHost) {\n          return `${httpScheme}://${httpHost}${httpTarget}`;\n        } else {\n          const netPeerPort = attributes[SEMATTRS_NET_PEER_PORT];\n          if (netPeerPort) {\n            const netPeerName = attributes[SEMATTRS_NET_PEER_NAME];\n            if (netPeerName) {\n              return `${httpScheme}://${netPeerName}:${netPeerPort}${httpTarget}`;\n            } else {\n              const netPeerIp = attributes[SEMATTRS_NET_PEER_IP];\n              if (netPeerIp) {\n                return `${httpScheme}://${netPeerIp}:${netPeerPort}${httpTarget}`;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return \"\";\n}\n\n/**\n * UTC time the request was made. Expressed as the number of 100-nanosecond intervals that have elapsed since 12:00:00 midnight on January 1, 0001. This is used for clock skew calculations, so the value can never be stale (cached).\n *\n * @example\n * 8/5/2020 10:15:00 PM UTC =\\> 637322625000000000\n * 8/5/2020 10:15:01 PM UTC =\\> 637322625010000000\n */\nexport function getTransmissionTime(): number {\n  return (Date.now() + 62135596800000) * 10000;\n}\n"]}