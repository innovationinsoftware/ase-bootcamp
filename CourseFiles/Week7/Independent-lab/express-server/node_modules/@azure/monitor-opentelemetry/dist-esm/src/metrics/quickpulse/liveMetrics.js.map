{"version":3,"file":"liveMetrics.js","sourceRoot":"","sources":["../../../../src/metrics/quickpulse/liveMetrics.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport * as os from \"os\";\nimport {\n  MeterProvider,\n  MeterProviderOptions,\n  PeriodicExportingMetricReader,\n  PeriodicExportingMetricReaderOptions,\n} from \"@opentelemetry/sdk-metrics\";\nimport { InternalConfig } from \"../../shared/config\";\nimport {\n  Meter,\n  ObservableGauge,\n  ObservableResult,\n  SpanKind,\n  SpanStatusCode,\n  ValueType,\n  context,\n} from \"@opentelemetry/api\";\nimport { RandomIdGenerator, ReadableSpan, TimedEvent } from \"@opentelemetry/sdk-trace-base\";\nimport { LogRecord } from \"@opentelemetry/sdk-logs\";\nimport { isExceptionTelemetry } from \"../utils\";\nimport {\n  DocumentIngress,\n  Exception,\n  MonitoringDataPoint,\n  IsSubscribedOptionalParams,\n  IsSubscribedResponse,\n  PublishResponse,\n  RemoteDependency,\n  /* eslint-disable-next-line @typescript-eslint/no-redeclare */\n  Request,\n  Trace,\n} from \"../../generated\";\nimport {\n  getCloudRole,\n  getCloudRoleInstance,\n  getLogDocument,\n  getSdkVersion,\n  getSpanDocument,\n  getTransmissionTime,\n} from \"./utils\";\nimport { QuickpulseMetricExporter } from \"./export/exporter\";\nimport { QuickpulseSender } from \"./export/sender\";\nimport { ConnectionStringParser } from \"../../utils/connectionStringParser\";\nimport { DEFAULT_LIVEMETRICS_ENDPOINT } from \"../../types\";\nimport { QuickPulseOpenTelemetryMetricNames, QuickpulseExporterOptions } from \"./types\";\nimport { hrTimeToMilliseconds, suppressTracing } from \"@opentelemetry/core\";\nimport { getInstance } from \"../../utils/statsbeat\";\n\nconst POST_INTERVAL = 1000;\nconst MAX_POST_WAIT_TIME = 20000;\nconst PING_INTERVAL = 5000;\nconst MAX_PING_WAIT_TIME = 60000;\nconst FALLBACK_INTERVAL = 60000;\n\n/**\n * Azure Monitor Live Metrics\n * @internal\n */\nexport class LiveMetrics {\n  private config: InternalConfig;\n  private meterProvider: MeterProvider | undefined;\n  private metricReader: PeriodicExportingMetricReader | undefined;\n  private meter: Meter | undefined;\n  private requestDurationGauge: ObservableGauge | undefined;\n  private dependencyDurationGauge: ObservableGauge | undefined;\n  private requestRateGauge: ObservableGauge | undefined;\n  private requestFailedRateGauge: ObservableGauge | undefined;\n  private dependencyRateGauge: ObservableGauge | undefined;\n  private dependencyFailedRateGauge: ObservableGauge | undefined;\n  private memoryCommitedGauge: ObservableGauge | undefined;\n  private processorTimeGauge: ObservableGauge | undefined;\n  private exceptionsRateGauge: ObservableGauge | undefined;\n\n  private documents: DocumentIngress[] = [];\n  private pingInterval: number;\n  private postInterval: number;\n  private quickpulseExporter: QuickpulseMetricExporter;\n  private pingSender: QuickpulseSender;\n  private isCollectingData: boolean;\n  private lastSuccessTime: number = Date.now();\n  private handle: NodeJS.Timer;\n  // Monitoring data point with common properties\n  private baseMonitoringDataPoint: MonitoringDataPoint;\n  private totalRequestCount = 0;\n  private totalFailedRequestCount = 0;\n  private totalDependencyCount = 0;\n  private totalFailedDependencyCount = 0;\n  private totalExceptionCount = 0;\n  private requestDuration = 0;\n  private dependencyDuration = 0;\n  private lastRequestDuration: { count: number; duration: number; time: number } = {\n    count: 0,\n    duration: 0,\n    time: 0,\n  };\n  private lastRequestRate: { count: number; time: number } = { count: 0, time: 0 };\n  private lastFailedRequestRate: { count: number; time: number } = { count: 0, time: 0 };\n  private lastDependencyDuration: { count: number; duration: number; time: number } = {\n    count: 0,\n    duration: 0,\n    time: 0,\n  };\n  private lastDependencyRate: { count: number; time: number } = { count: 0, time: 0 };\n  private lastFailedDependencyRate: { count: number; time: number } = { count: 0, time: 0 };\n  private lastExceptionRate: { count: number; time: number } = { count: 0, time: 0 };\n  private lastCpus:\n    | {\n        model: string;\n        speed: number;\n        times: { user: number; nice: number; sys: number; idle: number; irq: number };\n      }[]\n    | undefined;\n  private statsbeatOptionsUpdated = false;\n\n  /**\n   * Initializes a new instance of the StandardMetrics class.\n   * @param config - Distro configuration.\n   * @param options - Standard Metrics options.\n   */\n  constructor(config: InternalConfig) {\n    this.config = config;\n    const idGenerator = new RandomIdGenerator();\n    const streamId = idGenerator.generateTraceId();\n    const machineName = os.hostname();\n    const instance = getCloudRoleInstance(this.config.resource);\n    const roleName = getCloudRole(this.config.resource);\n    const version = getSdkVersion();\n    this.baseMonitoringDataPoint = {\n      version: version,\n      invariantVersion: 1,\n      instance: instance,\n      roleName: roleName,\n      machineName: machineName,\n      streamId: streamId,\n      performanceCollectionSupported: true,\n      isWebApp: process.env[\"WEBSITE_SITE_NAME\"] ? true : false,\n    };\n    const parsedConnectionString = ConnectionStringParser.parse(\n      this.config.azureMonitorExporterOptions.connectionString ||\n        process.env[\"APPLICATIONINSIGHTS_CONNECTION_STRING\"],\n    );\n    this.pingSender = new QuickpulseSender({\n      endpointUrl: parsedConnectionString.liveendpoint || DEFAULT_LIVEMETRICS_ENDPOINT,\n      instrumentationKey: parsedConnectionString.instrumentationkey || \"\",\n      credential: this.config.azureMonitorExporterOptions.credential,\n      credentialScopes: this.config.azureMonitorExporterOptions.credentialScopes,\n    });\n    const exporterOptions: QuickpulseExporterOptions = {\n      endpointUrl: parsedConnectionString.liveendpoint || DEFAULT_LIVEMETRICS_ENDPOINT,\n      instrumentationKey: parsedConnectionString.instrumentationkey || \"\",\n      credential: this.config.azureMonitorExporterOptions.credential,\n      credentialScopes: this.config.azureMonitorExporterOptions.credentialScopes,\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      postCallback: this.quickPulseDone.bind(this),\n      getDocumentsFn: this.getDocuments.bind(this),\n      baseMonitoringDataPoint: this.baseMonitoringDataPoint,\n    };\n    this.quickpulseExporter = new QuickpulseMetricExporter(exporterOptions);\n    this.isCollectingData = false;\n    this.pingInterval = PING_INTERVAL; // Default\n    this.postInterval = POST_INTERVAL;\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.handle = <any>setTimeout(this.goQuickpulse.bind(this), this.pingInterval);\n    this.handle.unref(); // Don't block apps from terminating\n  }\n\n  public shutdown(): void {\n    this.meterProvider?.shutdown();\n  }\n\n  private async goQuickpulse(): Promise<void> {\n    if (!this.isCollectingData) {\n      // If not collecting, Ping\n      try {\n        const params: IsSubscribedOptionalParams = {\n          transmissionTime: getTransmissionTime(),\n          monitoringDataPoint: this.baseMonitoringDataPoint,\n        };\n        await context.with(suppressTracing(context.active()), async () => {\n          const response = await this.pingSender.isSubscribed(params);\n          this.quickPulseDone(response);\n        });\n      } catch (error) {\n        this.quickPulseDone(undefined);\n      }\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      this.handle = <any>setTimeout(this.goQuickpulse.bind(this), this.pingInterval);\n      this.handle.unref();\n    }\n    if (this.isCollectingData) {\n      this.activateMetrics({ collectionInterval: this.postInterval });\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/require-await\n  private async quickPulseDone(\n    response: PublishResponse | IsSubscribedResponse | undefined,\n  ): Promise<void> {\n    if (!response) {\n      if (!this.isCollectingData) {\n        if (Date.now() - this.lastSuccessTime >= MAX_PING_WAIT_TIME) {\n          this.pingInterval = FALLBACK_INTERVAL;\n        }\n      } else {\n        if (Date.now() - this.lastSuccessTime >= MAX_POST_WAIT_TIME) {\n          this.postInterval = FALLBACK_INTERVAL;\n          this.deactivateMetrics();\n          this.activateMetrics({ collectionInterval: this.postInterval });\n        }\n      }\n    } else {\n      this.postInterval = POST_INTERVAL;\n      // Update using response if needed\n      this.lastSuccessTime = Date.now();\n      this.isCollectingData =\n        response.xMsQpsSubscribed && response.xMsQpsSubscribed === \"true\" ? true : false;\n\n      // If collecting was stoped\n      if (!this.isCollectingData && this.meterProvider) {\n        this.deactivateMetrics();\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        this.handle = <any>setTimeout(this.goQuickpulse.bind(this), this.pingInterval);\n        this.handle.unref();\n      }\n\n      const endpointRedirect = (response as IsSubscribedResponse).xMsQpsServiceEndpointRedirectV2;\n      if (endpointRedirect) {\n        this.pingSender.handlePermanentRedirect(endpointRedirect);\n        this.quickpulseExporter.getSender().handlePermanentRedirect(endpointRedirect);\n      }\n      const pollingInterval = (response as IsSubscribedResponse).xMsQpsServicePollingIntervalHint;\n      if (pollingInterval) {\n        this.pingInterval = Number(pollingInterval);\n      } else {\n        this.pingInterval = PING_INTERVAL;\n      }\n    }\n  }\n\n  // Activate live metrics collection\n  public activateMetrics(options?: { collectionInterval: number }): void {\n    if (this.meterProvider) {\n      return;\n    }\n    // Turn on live metrics active collection for statsbeat\n    if (!this.statsbeatOptionsUpdated) {\n      getInstance().setStatsbeatFeatures({}, { liveMetrics: true });\n      this.statsbeatOptionsUpdated = true;\n    }\n    this.lastCpus = os.cpus();\n    this.totalDependencyCount = 0;\n    this.totalExceptionCount = 0;\n    this.totalFailedDependencyCount = 0;\n    this.totalFailedRequestCount = 0;\n    this.totalRequestCount = 0;\n    this.requestDuration = 0;\n    this.dependencyDuration = 0;\n    this.lastRequestDuration = { count: 0, duration: 0, time: 0 };\n    this.lastRequestRate = { count: 0, time: 0 };\n    this.lastFailedRequestRate = { count: 0, time: 0 };\n    this.lastDependencyDuration = { count: 0, duration: 0, time: 0 };\n    this.lastDependencyRate = { count: 0, time: 0 };\n    this.lastFailedDependencyRate = { count: 0, time: 0 };\n    this.lastExceptionRate = { count: 0, time: 0 };\n\n    const metricReaderOptions: PeriodicExportingMetricReaderOptions = {\n      exporter: this.quickpulseExporter,\n      exportIntervalMillis: options?.collectionInterval,\n    };\n    this.metricReader = new PeriodicExportingMetricReader(metricReaderOptions);\n    const meterProviderConfig: MeterProviderOptions = {\n      resource: this.config.resource,\n      readers: [this.metricReader],\n    };\n    this.meterProvider = new MeterProvider(meterProviderConfig);\n    this.meter = this.meterProvider.getMeter(\"AzureMonitorLiveMetricsMeter\");\n    this.requestDurationGauge = this.meter.createObservableGauge(\n      QuickPulseOpenTelemetryMetricNames.REQUEST_DURATION,\n      {\n        valueType: ValueType.DOUBLE,\n      },\n    );\n    this.requestRateGauge = this.meter.createObservableGauge(\n      QuickPulseOpenTelemetryMetricNames.REQUEST_RATE,\n      {\n        valueType: ValueType.DOUBLE,\n      },\n    );\n    this.requestFailedRateGauge = this.meter.createObservableGauge(\n      QuickPulseOpenTelemetryMetricNames.REQUEST_FAILURE_RATE,\n      {\n        valueType: ValueType.DOUBLE,\n      },\n    );\n    this.dependencyDurationGauge = this.meter.createObservableGauge(\n      QuickPulseOpenTelemetryMetricNames.DEPENDENCY_DURATION,\n      {\n        valueType: ValueType.DOUBLE,\n      },\n    );\n    this.dependencyRateGauge = this.meter.createObservableGauge(\n      QuickPulseOpenTelemetryMetricNames.DEPENDENCY_RATE,\n      {\n        valueType: ValueType.DOUBLE,\n      },\n    );\n    this.dependencyFailedRateGauge = this.meter.createObservableGauge(\n      QuickPulseOpenTelemetryMetricNames.DEPENDENCY_FAILURE_RATE,\n      {\n        valueType: ValueType.DOUBLE,\n      },\n    );\n\n    this.memoryCommitedGauge = this.meter.createObservableGauge(\n      QuickPulseOpenTelemetryMetricNames.COMMITTED_BYTES,\n      {\n        valueType: ValueType.INT,\n      },\n    );\n\n    this.processorTimeGauge = this.meter.createObservableGauge(\n      QuickPulseOpenTelemetryMetricNames.PROCESSOR_TIME,\n      {\n        valueType: ValueType.DOUBLE,\n      },\n    );\n    this.exceptionsRateGauge = this.meter.createObservableGauge(\n      QuickPulseOpenTelemetryMetricNames.EXCEPTION_RATE,\n      {\n        valueType: ValueType.DOUBLE,\n      },\n    );\n\n    this.requestDurationGauge.addCallback(this.getRequestDuration.bind(this));\n    this.requestRateGauge.addCallback(this.getRequestRate.bind(this));\n    this.requestFailedRateGauge.addCallback(this.getRequestFailedRate.bind(this));\n    this.dependencyDurationGauge.addCallback(this.getDependencyDuration.bind(this));\n    this.dependencyRateGauge.addCallback(this.getDependencyRate.bind(this));\n    this.dependencyFailedRateGauge.addCallback(this.getDependencyFailedRate.bind(this));\n    this.exceptionsRateGauge.addCallback(this.getExceptionRate.bind(this));\n    this.memoryCommitedGauge.addCallback(this.getCommitedMemory.bind(this));\n    this.processorTimeGauge.addCallback(this.getProcessorTime.bind(this));\n  }\n\n  /**\n   * Deactivate metric collection\n   */\n  public deactivateMetrics(): void {\n    this.documents = [];\n    this.meterProvider?.shutdown();\n    this.meterProvider = undefined;\n  }\n\n  /**\n   * Force flush Meter Provider.\n   */\n  public async flush(): Promise<void> {\n    await this.meterProvider?.forceFlush();\n  }\n\n  /**\n   *Get OpenTelemetry MeterProvider\n   */\n  public getMeterProvider(): MeterProvider | undefined {\n    return this.meterProvider;\n  }\n\n  public getDocuments(): DocumentIngress[] {\n    const result: DocumentIngress[] = this.documents;\n    this.documents = [];\n    return result;\n  }\n\n  private addDocument(document: DocumentIngress): void {\n    if (document) {\n      // Limit risk of memory leak by limiting doc length to something manageable\n      if (this.documents.length > 20) {\n        this.documents.shift(); // Remove oldest document\n      }\n      this.documents.push(document);\n    }\n  }\n\n  /**\n   * Record Span metrics\n   * @internal\n   */\n  public recordSpan(span: ReadableSpan): void {\n    if (this.isCollectingData) {\n      // Add document and calculate metrics\n      const document: Request | RemoteDependency = getSpanDocument(span);\n      this.addDocument(document);\n      const durationMs = hrTimeToMilliseconds(span.duration);\n      const success = span.status.code !== SpanStatusCode.ERROR;\n\n      if (span.kind === SpanKind.SERVER || span.kind === SpanKind.CONSUMER) {\n        this.totalRequestCount++;\n        this.requestDuration += durationMs;\n        if (!success) {\n          this.totalFailedRequestCount++;\n        }\n      } else {\n        this.totalDependencyCount++;\n        this.dependencyDuration += durationMs;\n        if (!success) {\n          this.totalFailedDependencyCount++;\n        }\n      }\n      if (span.events) {\n        span.events.forEach((event: TimedEvent) => {\n          event.attributes = event.attributes || {};\n          if (event.name === \"exception\") {\n            this.totalExceptionCount++;\n          }\n        });\n      }\n    }\n  }\n\n  /**\n   * Record LogRecord metrics, add attribute so data is not aggregated again in ingestion\n   * @internal\n   */\n  public recordLog(logRecord: LogRecord): void {\n    if (this.isCollectingData) {\n      const document: Trace | Exception = getLogDocument(logRecord);\n      this.addDocument(document);\n      if (isExceptionTelemetry(logRecord)) {\n        this.totalExceptionCount++;\n      }\n    }\n  }\n\n  private getRequestDuration(observableResult: ObservableResult): void {\n    const currentTime = +new Date();\n    const requestInterval = this.totalRequestCount - this.lastRequestDuration.count || 0;\n    const durationInterval = this.requestDuration - this.lastRequestDuration.duration || 0;\n    const elapsedMs = currentTime - this.lastRequestDuration.time;\n    if (elapsedMs > 0) {\n      const averageExecutionTime = durationInterval / requestInterval || 0; // default to 0 in case no requests in this interval\n      observableResult.observe(averageExecutionTime);\n    }\n    this.lastRequestDuration = {\n      count: this.totalRequestCount,\n      duration: this.requestDuration,\n      time: currentTime,\n    };\n  }\n\n  private getRequestRate(observableResult: ObservableResult): void {\n    const currentTime = +new Date();\n    const intervalRequests = this.totalRequestCount - this.lastRequestRate.count || 0;\n    const elapsedMs = currentTime - this.lastRequestRate.time;\n    if (elapsedMs > 0) {\n      const elapsedSeconds = elapsedMs / 1000;\n      const dataPerSec = intervalRequests / elapsedSeconds;\n      observableResult.observe(dataPerSec);\n    }\n    this.lastRequestRate = {\n      count: this.totalRequestCount,\n      time: currentTime,\n    };\n  }\n\n  private getRequestFailedRate(observableResult: ObservableResult): void {\n    const currentTime = +new Date();\n    const intervalRequests = this.totalFailedRequestCount - this.lastFailedRequestRate.count || 0;\n    const elapsedMs = currentTime - this.lastFailedRequestRate.time;\n    if (elapsedMs > 0) {\n      const elapsedSeconds = elapsedMs / 1000;\n      const dataPerSec = intervalRequests / elapsedSeconds;\n      observableResult.observe(dataPerSec);\n    }\n    this.lastFailedRequestRate = {\n      count: this.totalFailedRequestCount,\n      time: currentTime,\n    };\n  }\n\n  private getDependencyDuration(observableResult: ObservableResult): void {\n    const currentTime = +new Date();\n    const dependencyInterval = this.totalDependencyCount - this.lastDependencyDuration.count || 0;\n    const durationInterval = this.dependencyDuration - this.lastDependencyDuration.duration || 0;\n    const elapsedMs = currentTime - this.lastDependencyDuration.time;\n    if (elapsedMs > 0) {\n      const averageExecutionTime = durationInterval / dependencyInterval || 0; // default to 0 in case no dependencies in this interval\n      observableResult.observe(averageExecutionTime);\n    }\n    this.lastDependencyDuration = {\n      count: this.totalDependencyCount,\n      duration: this.dependencyDuration,\n      time: currentTime,\n    };\n  }\n\n  private getDependencyRate(observableResult: ObservableResult): void {\n    const currentTime = +new Date();\n    const intervalData = this.totalDependencyCount - this.lastDependencyRate.count || 0;\n    const elapsedMs = currentTime - this.lastDependencyRate.time;\n    if (elapsedMs > 0) {\n      const elapsedSeconds = elapsedMs / 1000;\n      const dataPerSec = intervalData / elapsedSeconds;\n      observableResult.observe(dataPerSec);\n    }\n    this.lastDependencyRate = {\n      count: this.totalDependencyCount,\n      time: currentTime,\n    };\n  }\n\n  private getDependencyFailedRate(observableResult: ObservableResult): void {\n    const currentTime = +new Date();\n    const intervalData = this.totalFailedDependencyCount - this.lastFailedDependencyRate.count || 0;\n    const elapsedMs = currentTime - this.lastFailedDependencyRate.time;\n    if (elapsedMs > 0) {\n      const elapsedSeconds = elapsedMs / 1000;\n      const dataPerSec = intervalData / elapsedSeconds;\n      observableResult.observe(dataPerSec);\n    }\n    this.lastFailedDependencyRate = {\n      count: this.totalFailedDependencyCount,\n      time: currentTime,\n    };\n  }\n\n  private getExceptionRate(observableResult: ObservableResult): void {\n    const currentTime = +new Date();\n    const intervalData = this.totalExceptionCount - this.lastExceptionRate.count || 0;\n    const elapsedMs = currentTime - this.lastExceptionRate.time;\n    if (elapsedMs > 0) {\n      const elapsedSeconds = elapsedMs / 1000;\n      const dataPerSec = intervalData / elapsedSeconds;\n      observableResult.observe(dataPerSec);\n    }\n    this.lastExceptionRate = {\n      count: this.totalExceptionCount,\n      time: currentTime,\n    };\n  }\n\n  private getCommitedMemory(observableResult: ObservableResult): void {\n    const freeMem = os.freemem();\n    const committedMemory = os.totalmem() - freeMem;\n    observableResult.observe(committedMemory);\n  }\n\n  private getTotalCombinedCpu(\n    cpus: os.CpuInfo[],\n    lastCpus: os.CpuInfo[],\n  ): { combinedTotal: number; totalUser: number; totalIdle: number } {\n    let totalUser = 0;\n    let totalSys = 0;\n    let totalNice = 0;\n    let totalIdle = 0;\n    let totalIrq = 0;\n    for (let i = 0; !!cpus && i < cpus.length; i++) {\n      const cpu = cpus[i];\n      const lastCpu = lastCpus[i];\n      const times = cpu.times;\n      const lastTimes = lastCpu.times;\n      // user cpu time (or) % CPU time spent in user space\n      let user = times.user - lastTimes.user;\n      user = user > 0 ? user : 0; // Avoid negative values\n      totalUser += user;\n      // system cpu time (or) % CPU time spent in kernel space\n      let sys = times.sys - lastTimes.sys;\n      sys = sys > 0 ? sys : 0; // Avoid negative values\n      totalSys += sys;\n      // user nice cpu time (or) % CPU time spent on low priority processes\n      let nice = times.nice - lastTimes.nice;\n      nice = nice > 0 ? nice : 0; // Avoid negative values\n      totalNice += nice;\n      // idle cpu time (or) % CPU time spent idle\n      let idle = times.idle - lastTimes.idle;\n      idle = idle > 0 ? idle : 0; // Avoid negative values\n      totalIdle += idle;\n      // irq (or) % CPU time spent servicing/handling hardware interrupts\n      let irq = times.irq - lastTimes.irq;\n      irq = irq > 0 ? irq : 0; // Avoid negative values\n      totalIrq += irq;\n    }\n    const combinedTotal = totalUser + totalSys + totalNice + totalIdle + totalIrq;\n    return {\n      combinedTotal: combinedTotal,\n      totalUser: totalUser,\n      totalIdle: totalIdle,\n    };\n  }\n\n  private getProcessorTime(observableResult: ObservableResult): void {\n    // this reports total ms spent in each category since the OS was booted, to calculate percent it is necessary\n    // to find the delta since the last measurement\n    const cpus = os.cpus();\n    if (cpus && cpus.length && this.lastCpus && cpus.length === this.lastCpus.length) {\n      const cpuTotals = this.getTotalCombinedCpu(cpus, this.lastCpus);\n\n      const value =\n        cpuTotals.combinedTotal > 0\n          ? ((cpuTotals.combinedTotal - cpuTotals.totalIdle) / cpuTotals.combinedTotal) * 100\n          : 0;\n      observableResult.observe(value);\n    }\n    this.lastCpus = cpus;\n  }\n}\n"]}