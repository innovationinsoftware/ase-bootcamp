{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/metrics/utils.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { Attributes, SpanStatusCode } from \"@opentelemetry/api\";\nimport { ReadableSpan } from \"@opentelemetry/sdk-trace-base\";\nimport {\n  SEMRESATTRS_SERVICE_NAME,\n  SEMRESATTRS_SERVICE_NAMESPACE,\n  SEMRESATTRS_SERVICE_INSTANCE_ID,\n  SEMATTRS_PEER_SERVICE,\n  SEMATTRS_NET_PEER_NAME,\n  SEMATTRS_NET_HOST_PORT,\n  SEMATTRS_EXCEPTION_MESSAGE,\n  SEMATTRS_EXCEPTION_TYPE,\n  SEMATTRS_HTTP_USER_AGENT,\n  SEMATTRS_HTTP_STATUS_CODE,\n} from \"@opentelemetry/semantic-conventions\";\nimport {\n  MetricDependencyDimensions,\n  MetricDimensionTypeKeys,\n  MetricRequestDimensions,\n  StandardMetricBaseDimensions,\n  StandardMetricIds,\n  StandardMetricPropertyNames,\n} from \"./types\";\nimport { LogRecord } from \"@opentelemetry/sdk-logs\";\nimport { Resource } from \"@opentelemetry/resources\";\n\nexport function getRequestDimensions(span: ReadableSpan): Attributes {\n  const dimensions: MetricRequestDimensions = getBaseDimensions(span.resource);\n  dimensions.metricId = StandardMetricIds.REQUEST_DURATION;\n  const statusCode = String(span.attributes[SEMATTRS_HTTP_STATUS_CODE]);\n  dimensions.requestResultCode = statusCode;\n  // OTel treats 4xx request responses as UNSET SpanStatusCode, but we should count them as failed\n  dimensions.requestSuccess =\n    span.status.code !== SpanStatusCode.ERROR && (Number(statusCode) || 0) < 400 ? \"True\" : \"False\";\n  if (isSyntheticLoad(span)) {\n    dimensions.operationSynthetic = \"True\";\n  }\n  return convertDimensions(dimensions);\n}\n\nexport function getDependencyDimensions(span: ReadableSpan): Attributes {\n  const dimensions: MetricDependencyDimensions = getBaseDimensions(span.resource);\n  dimensions.metricId = StandardMetricIds.DEPENDENCIES_DURATION;\n  const statusCode = String(span.attributes[SEMATTRS_HTTP_STATUS_CODE]);\n  dimensions.dependencyTarget = getDependencyTarget(span.attributes);\n  dimensions.dependencyResultCode = statusCode;\n  dimensions.dependencyType = \"http\";\n  dimensions.dependencySuccess = span.status.code !== SpanStatusCode.ERROR ? \"True\" : \"False\";\n  if (isSyntheticLoad(span)) {\n    dimensions.operationSynthetic = \"True\";\n  }\n  return convertDimensions(dimensions);\n}\n\nexport function getExceptionDimensions(resource: Resource): Attributes {\n  const dimensions: StandardMetricBaseDimensions = getBaseDimensions(resource);\n  dimensions.metricId = StandardMetricIds.EXCEPTIONS_COUNT;\n  return dimensions as Attributes;\n}\n\nexport function getTraceDimensions(resource: Resource): Attributes {\n  const dimensions: StandardMetricBaseDimensions = getBaseDimensions(resource);\n  dimensions.metricId = StandardMetricIds.TRACES_COUNT;\n  return dimensions as Attributes;\n}\n\nexport function getBaseDimensions(resource: Resource): StandardMetricBaseDimensions {\n  const dimensions: StandardMetricBaseDimensions = {};\n  dimensions.IsAutocollected = \"True\";\n  if (resource) {\n    const spanResourceAttributes = resource.attributes;\n    const serviceName = spanResourceAttributes[SEMRESATTRS_SERVICE_NAME];\n    const serviceNamespace = spanResourceAttributes[SEMRESATTRS_SERVICE_NAMESPACE];\n    if (serviceName) {\n      if (serviceNamespace) {\n        dimensions.cloudRoleName = `${serviceNamespace}.${serviceName}`;\n      } else {\n        dimensions.cloudRoleName = String(serviceName);\n      }\n    }\n    const serviceInstanceId = spanResourceAttributes[SEMRESATTRS_SERVICE_INSTANCE_ID];\n    dimensions.cloudRoleInstance = String(serviceInstanceId);\n  }\n  return dimensions;\n}\n\n// Get metric dependency target, avoiding high cardinality.\nexport function getDependencyTarget(attributes: Attributes): string {\n  if (!attributes) {\n    return \"\";\n  }\n  const peerService = attributes[SEMATTRS_PEER_SERVICE];\n  const hostPort = attributes[SEMATTRS_NET_HOST_PORT];\n  const netPeerName = attributes[SEMATTRS_NET_PEER_NAME];\n  if (peerService) {\n    return String(peerService);\n  } else if (hostPort && netPeerName) {\n    return `${netPeerName}:${hostPort}`;\n  } else if (netPeerName) {\n    return String(netPeerName);\n  }\n  return \"\";\n}\n\nexport function isExceptionTelemetry(logRecord: LogRecord): boolean {\n  const baseType = logRecord.attributes[\"_MS.baseType\"];\n  // If Application Insights Legacy logs\n  if (baseType && baseType === \"ExceptionData\") {\n    return true;\n  } else if (\n    logRecord.attributes[SEMATTRS_EXCEPTION_MESSAGE] ||\n    logRecord.attributes[SEMATTRS_EXCEPTION_TYPE]\n  ) {\n    return true;\n  }\n  return false;\n}\n\nexport function isTraceTelemetry(logRecord: LogRecord): boolean {\n  const baseType = logRecord.attributes[\"_MS.baseType\"];\n  // If Application Insights Legacy logs\n  if (baseType && baseType === \"MessageData\") {\n    return true;\n  } else if (\n    !logRecord.attributes[SEMATTRS_EXCEPTION_MESSAGE] &&\n    !logRecord.attributes[SEMATTRS_EXCEPTION_TYPE]\n  ) {\n    return true;\n  }\n  return false;\n}\n\nexport function isSyntheticLoad(record: LogRecord | ReadableSpan): boolean {\n  const userAgent = String(record.attributes[SEMATTRS_HTTP_USER_AGENT]);\n  return userAgent !== null && userAgent.includes(\"AlwaysOn\") ? true : false;\n}\n\nexport function convertDimensions(\n  dimensions: MetricDependencyDimensions | MetricRequestDimensions,\n): Attributes {\n  const convertedDimensions: any = {};\n  for (const dim in dimensions) {\n    convertedDimensions[StandardMetricPropertyNames[dim as MetricDimensionTypeKeys]] = (\n      dimensions as any\n    )[dim];\n  }\n  return convertedDimensions as Attributes;\n}\n"]}